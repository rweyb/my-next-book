[33mcommit a26f36bbf05132bf2814ff0be08e6ad5eb0d649a[m
Author: rweyb <danyulingnai8@gmail.com>
Date:   Fri Sep 6 13:48:56 2024 +0900

    ポートフォリオ完成

[1mdiff --git a/.env b/.env[m
[1mnew file mode 100644[m
[1mindex 0000000..a45fb81[m
[1m--- /dev/null[m
[1m+++ b/.env[m
[36m@@ -0,0 +1,23 @@[m
[32m+[m[32m# Environment variables declared in this file are automatically made available to Prisma.[m
[32m+[m[32m# See the documentation for more detail: https://pris.ly/d/prisma-schema#accessing-environment-variables-from-the-schema[m
[32m+[m
[32m+[m[32m# Prisma supports the native connection string format for PostgreSQL, MySQL, SQLite, SQL Server, MongoDB and CockroachDB.[m
[32m+[m[32m# See the documentation for all the connection string options: https://pris.ly/d/connection-strings[m
[32m+[m
[32m+[m[32m# SQLite[m
[32m+[m[32m#DATABASE_URL="file:./dev.db"[m
[32m+[m[32mRECOIL_DUPLICATE_ATOM_KEY_CHECKING_ENABLED=false[m
[32m+[m
[32m+[m[32m# Firebase configuration[m
[32m+[m[32mNEXT_PUBLIC_FIREBASE_API_KEY="AIzaSyDTnzC0GTR3HA7BQr9Ykar0ZyJdd4_qLkQ"[m
[32m+[m[32mNEXT_PUBLIC_FIREBASE_AUTH_DOMAIN="reading-6fc0e.firebaseapp.com"[m
[32m+[m[32mNEXT_PUBLIC_FIREBASE_PROJECT_ID="reading-6fc0e"[m
[32m+[m[32mNEXT_PUBLIC_FIREBASE_STORAGE_BUCKET="reading-6fc0e.appspot.com"[m
[32m+[m[32mNEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID="278937799140"[m
[32m+[m[32mNEXT_PUBLIC_FIREBASE_APP_ID="1:278937799140:web:dfa2f2014d3d221e371ff1"[m
[32m+[m
[32m+[m[32m# Google Books API configuration[m
[32m+[m[32mNEXT_PUBLIC_GOOGLE_API_KEY="AIzaSyDVVb2RRdH4haliERqWzNhgGS8hHFRs6VQ"[m[41m  [m
[32m+[m
[32m+[m[32m# MongoDB (if you decide to use MongoDB instead of SQLite)[m
[32m+[m[32mDATABASE_URL="mongodb://localhost:27017/bookshelf"[m
[1mdiff --git a/.history/src/app/Bookshelf/page_20240906125412.js b/.history/src/app/Bookshelf/page_20240906125412.js[m
[1mnew file mode 100644[m
[1mindex 0000000..435fd5b[m
[1m--- /dev/null[m
[1m+++ b/.history/src/app/Bookshelf/page_20240906125412.js[m
[36m@@ -0,0 +1,129 @@[m
[32m+[m[32m"use client";[m
[32m+[m
[32m+[m[32mimport React, { useEffect, useState } from "react";[m
[32m+[m[32mimport { useRecoilValue } from "recoil";[m
[32m+[m[32mimport { OwnedBooksState } from "@/state/OwnedBooksState";[m
[32m+[m[32mimport { signInUserState } from "@/state/signInUserState";[m
[32m+[m[32mimport MyBooksButton from "@/components/MyBooksButton";[m
[32m+[m[32mimport ReturnTopButton from "@/components/ReturnTopButton";[m
[32m+[m[32mimport Image from "next/image";[m
[32m+[m
[32m+[m[32mconst BookshelfPage = () => {[m
[32m+[m[32m  const ownedBooks = useRecoilValue(OwnedBooksState);[m
[32m+[m[32m  const signInUser = useRecoilValue(signInUserState); // サインインユーザーの取得[m
[32m+[m[32m  const [books, setBooks] = useState([]); // 書籍情報の状態管理[m
[32m+[m[32m  const [error, setError] = useState(null); // エラーメッセージの状態管理[m
[32m+[m
[32m+[m[32m  useEffect(() => {[m
[32m+[m[32m    const fetchOwnedBooks = async () => {[m
[32m+[m[32m      if (!signInUser?.uid) {[m
[32m+[m[32m        setError("ユーザーがサインインしていません。");[m
[32m+[m[32m        return;[m
[32m+[m[32m      }[m
[32m+[m
[32m+[m[32m      if (ownedBooks.length === 0) {[m
[32m+[m[32m        setBooks([]); // お気に入りが空の場合、書籍リストも空にする[m
[32m+[m[32m        return;[m
[32m+[m[32m      }[m
[32m+[m
[32m+[m[32m      try {[m
[32m+[m[32m        const query = new URLSearchParams({ userId: signInUser.uid }).toString();[m
[32m+[m[32m        const response = await fetch(`/api/bookshelf?${query}`);[m
[32m+[m[32m        if (!response.ok) {[m
[32m+[m[32m          throw new Error("Failed to fetch owned books");[m
[32m+[m[32m        }[m
[32m+[m[32m        const data = await response.json();[m
[32m+[m[32m        setBooks(data || []);[m
[32m+[m[32m      } catch (error) {[m
[32m+[m[32m        console.error("Error fetching owned books:", error);[m
[32m+[m[32m        setError("本棚の取得中にエラーが発生しました。");[m
[32m+[m[32m      }[m
[32m+[m[32m    };[m
[32m+[m
[32m+[m[32m    fetchOwnedBooks();[m
[32m+[m[32m  }, [ownedBooks, signInUser]); // `signInUser` または `setOwnedBooks` が変更されると再実行[m
[32m+[m
[32m+[m[41m  [m
[32m+[m[32m  const handleOwnedChange = async (bookId, isOwned) => {[m
[32m+[m[32m    try {[m
[32m+[m[32m      if (isOwned) {[m
[32m+[m[32m        // 所有する本を追加する処理[m
[32m+[m[32m        await fetch("/api/bookshelf", {[m
[32m+[m[32m          method: "POST",[m
[32m+[m[32m          headers: { "Content-Type": "application/json" },[m
[32m+[m[32m          body: JSON.stringify({ userId: signInUser.uid, bookId }),[m
[32m+[m[32m        });[m
[32m+[m[32m      } else {[m
[32m+[m[32m        // 所有する本を削除する処理[m
[32m+[m[32m        await fetch("/api/bookshelf", {[m
[32m+[m[32m          method: "DELETE",[m
[32m+[m[32m          headers: { "Content-Type": "application/json" },[m
[32m+[m[32m          body: JSON.stringify({ userId: signInUser.uid, bookId }),[m
[32m+[m[32m        });[m
[32m+[m[32m      }[m
[32m+[m
[32m+[m[32m      // 状態を再取得して更新[m
[32m+[m[32m      const dataResponse = await fetch(`/api/bookshelf?userId=${signInUser.uid}`);[m
[32m+[m[32m      const data = await dataResponse.json();[m
[32m+[m[32m      setBooks(data || []);[m
[32m+[m[32m    } catch (error) {[m
[32m+[m[32m      console.error("Error updating owned books:", error);[m
[32m+[m[32m      setError("本棚の更新中にエラーが発生しました。");[m
[32m+[m[32m    }[m
[32m+[m[32m  };[m
[32m+[m
[32m+[m[32m  if (!signInUser || !signInUser.uid) {[m
[32m+[m[32m    return ([m
[32m+[m[32m      <div>ログインしていないため、本棚ページを表示できません。</div>[m
[32m+[m[32m    );[m
[32m+[m[32m  }[m
[32m+[m
[32m+[m[32m  return ([m
[32m+[m[32m    <div className="p-6 mx-auto max-w-screen-lg">[m
[32m+[m[32m      <h1 className="text-3xl font-bold mb-6">自分の本棚</h1>[m
[32m+[m[32m      {error ? ([m
[32m+[m[32m        <p className="text-red-500">{error}</p>[m
[32m+[m[32m      ) : ([m
[32m+[m[32m        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6">[m
[32m+[m[32m          {books.length > 0 ? ([m
[32m+[m[32m            books.map((book) => ([m
[32m+[m[32m              <div key={book.id} className="relative border p-4 rounded-lg shadow-md flex flex-col items-center">[m
[32m+[m[32m                <Image[m
[32m+[m[32m                  src={book.image || "/images/default_image.jpg"}[m
[32m+[m[32m                  alt={book.title || "書籍画像"}[m
[32m+[m[32m                  width={120}[m
[32m+[m[32m                  height={160}[m
[32m+[m[32m                  layout="intrinsic"[m
[32m+[m[32m                  className="object-cover rounded-lg"[m
[32m+[m[32m                />[m
[32m+[m[32m                <div className="mt-4 text-center">[m
[32m+[m[32m                  <h2 className="text-xl font-semibold">{book.title || "タイトルがありません"}</h2>[m
[32m+[m[32m                  <p>著者: {book.author || "著者情報がありません"}</p>[m
[32m+[m[32m                  <p>価格: {book.price || "価格情報がありません"}</p>[m
[32m+[m[32m                  <p>出版社: {book.publisher || "出版社情報がありません"}</p>[m
[32m+[m[32m                  <p>[m
[32m+[m[32m                    出版日:{" "}[m
[32m+[m[32m                    {book.published[m
[32m+[m[32m                      ? new Date(book.published).toLocaleDateString()[m
[32m+[m[32m                      : "出版日がありません"}[m
[32m+[m[32m                  </p>[m
[32m+[m[32m                </div>[m
[32m+[m[32m                <MyBooksButton[m
[32m+[m[32m                  bookId={book.id}[m
[32m+[m[32m                  bookObj={book}[m
[32m+[m[32m                  onChange={handleOwnedChange}[m
[32m+[m[41m                  [m
[32m+[m[32m                />[m
[32m+[m[32m              </div>[m
[32m+[m[32m            ))[m
[32m+[m[32m          ) : ([m
[32m+[m[32m            <p>本棚に本がありません。</p>[m
[32m+[m[32m          )}[m
[32m+[m[32m        </div>[m
[32m+[m[32m      )}[m
[32m+[m[32m      <ReturnTopButton />[m
[32m+[m[32m    </div>[m
[32m+[m[32m  );[m
[32m+[m[32m};[m
[32m+[m
[32m+[m[32mexport default BookshelfPage;[m
\ No newline at end of file[m
[1mdiff --git a/.history/src/app/Bookshelf/page_20240906130924.js b/.history/src/app/Bookshelf/page_20240906130924.js[m
[1mnew file mode 100644[m
[1mindex 0000000..435fd5b[m
[1m--- /dev/null[m
[1m+++ b/.history/src/app/Bookshelf/page_20240906130924.js[m
[36m@@ -0,0 +1,129 @@[m
[32m+[m[32m"use client";[m
[32m+[m
[32m+[m[32mimport React, { useEffect, useState } from "react";[m
[32m+[m[32mimport { useRecoilValue } from "recoil";[m
[32m+[m[32mimport { OwnedBooksState } from "@/state/OwnedBooksState";[m
[32m+[m[32mimport { signInUserState } from "@/state/signInUserState";[m
[32m+[m[32mimport MyBooksButton from "@/components/MyBooksButton";[m
[32m+[m[32mimport ReturnTopButton from "@/components/ReturnTopButton";[m
[32m+[m[32mimport Image from "next/image";[m
[32m+[m
[32m+[m[32mconst BookshelfPage = () => {[m
[32m+[m[32m  const ownedBooks = useRecoilValue(OwnedBooksState);[m
[32m+[m[32m  const signInUser = useRecoilValue(signInUserState); // サインインユーザーの取得[m
[32m+[m[32m  const [books, setBooks] = useState([]); // 書籍情報の状態管理[m
[32m+[m[32m  const [error, setError] = useState(null); // エラーメッセージの状態管理[m
[32m+[m
[32m+[m[32m  useEffect(() => {[m
[32m+[m[32m    const fetchOwnedBooks = async () => {[m
[32m+[m[32m      if (!signInUser?.uid) {[m
[32m+[m[32m        setError("ユーザーがサインインしていません。");[m
[32m+[m[32m        return;[m
[32m+[m[32m      }[m
[32m+[m
[32m+[m[32m      if (ownedBooks.length === 0) {[m
[32m+[m[32m        setBooks([]); // お気に入りが空の場合、書籍リストも空にする[m
[32m+[m[32m        return;[m
[32m+[m[32m      }[m
[32m+[m
[32m+[m[32m      try {[m
[32m+[m[32m        const query = new URLSearchParams({ userId: signInUser.uid }).toString();[m
[32m+[m[32m        const response = await fetch(`/api/bookshelf?${query}`);[m
[32m+[m[32m        if (!response.ok) {[m
[32m+[m[32m          throw new Error("Failed to fetch owned books");[m
[32m+[m[32m        }[m
[32m+[m[32m        const data = await response.json();[m
[32m+[m[32m        setBooks(data || []);[m
[32m+[m[32m      } catch (error) {[m
[32m+[m[32m        console.error("Error fetching owned books:", error);[m
[32m+[m[32m        setError("本棚の取得中にエラーが発生しました。");[m
[32m+[m[32m      }[m
[32m+[m[32m    };[m
[32m+[m
[32m+[m[32m    fetchOwnedBooks();[m
[32m+[m[32m  }, [ownedBooks, signInUser]); // `signInUser` または `setOwnedBooks` が変更されると再実行[m
[32m+[m
[32m+[m[41m  [m
[32m+[m[32m  const handleOwnedChange = async (bookId, isOwned) => {[m
[32m+[m[32m    try {[m
[32m+[m[32m      if (isOwned) {[m
[32m+[m[32m        // 所有する本を追加する処理[m
[32m+[m[32m        await fetch("/api/bookshelf", {[m
[32m+[m[32m          method: "POST",[m
[32m+[m[32m          headers: { "Content-Type": "application/json" },[m
[32m+[m[32m          body: JSON.stringify({ userId: signInUser.uid, bookId }),[m
[32m+[m[32m        });[m
[32m+[m[32m      } else {[m
[32m+[m[32m        // 所有する本を削除する処理[m
[32m+[m[32m        await fetch("/api/bookshelf", {[m
[32m+[m[32m          method: "DELETE",[m
[32m+[m[32m          headers: { "Content-Type": "application/json" },[m
[32m+[m[32m          body: JSON.stringify({ userId: signInUser.uid, bookId }),[m
[32m+[m[32m        });[m
[32m+[m[32m      }[m
[32m+[m
[32m+[m[32m      // 状態を再取得して更新[m
[32m+[m[32m      const dataResponse = await fetch(`/api/bookshelf?userId=${signInUser.uid}`);[m
[32m+[m[32m      const data = await dataResponse.json();[m
[32m+[m[32m      setBooks(data || []);[m
[32m+[m[32m    } catch (error) {[m
[32m+[m[32m      console.error("Error updating owned books:", error);[m
[32m+[m[32m      setError("本棚の更新中にエラーが発生しました。");[m
[32m+[m[32m    }[m
[32m+[m[32m  };[m
[32m+[m
[32m+[m[32m  if (!signInUser || !signInUser.uid) {[m
[32m+[m[32m    return ([m
[32m+[m[32m      <div>ログインしていないため、本棚ページを表示できません。</div>[m
[32m+[m[32m    );[m
[32m+[m[32m  }[m
[32m+[m
[32m+[m[32m  return ([m
[32m+[m[32m    <div className="p-6 mx-auto max-w-screen-lg">[m
[32m+[m[32m      <h1 className="text-3xl font-bold mb-6">自分の本棚</h1>[m
[32m+[m[32m      {error ? ([m
[32m+[m[32m        <p className="text-red-500">{error}</p>[m
[32m+[m[32m      ) : ([m
[32m+[m[32m        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6">[m
[32m+[m[32m          {books.length > 0 ? ([m
[32m+[m[32m            books.map((book) => ([m
[32m+[m[32m              <div key={book.id} className="relative border p-4 rounded-lg shadow-md flex flex-col items-center">[m
[32m+[m[32m                <Image[m
[32m+[m[32m                  src={book.image || "/images/default_image.jpg"}[m
[32m+[m[32m                  alt={book.title || "書籍画像"}[m
[32m+[m[32m                  width={120}[m
[32m+[m[32m                  height={160}[m
[32m+[m[32m                  layout="intrinsic"[m
[32m+[m[32m                  className="object-cover rounded-lg"[m
[32m+[m[32m                />[m
[32m+[m[32m                <div className="mt-4 text-center">[m
[32m+[m[32m                  <h2 className="text-xl font-semibold">{book.title || "タイトルがありません"}</h2>[m
[32m+[m[32m                  <p>著者: {book.author || "著者情報がありません"}</p>[m
[32m+[m[32m                  <p>価格: {book.price || "価格情報がありません"}</p>[m
[32m+[m[32m                  <p>出版社: {book.publisher || "出版社情報がありません"}</p>[m
[32m+[m[32m                  <p>[m
[32m+[m[32m                    出版日:{" "}[m
[32m+[m[32m                    {book.published[m
[32m+[m[32m                      ? new Date(book.published).toLocaleDateString()[m
[32m+[m[32m                      : "出版日がありません"}[m
[32m+[m[32m                  </p>[m
[32m+[m[32m                </div>[m
[32m+[m[32m                <MyBooksButton[m
[32m+[m[32m                  bookId={book.id}[m
[32m+[m[32m                  bookObj={book}[m
[32m+[m[32m                  onChange={handleOwnedChange}[m
[32m+[m[41m                  [m
[32m+[m[32m                />[m
[32m+[m[32m              </div>[m
[32m+[m[32m            ))[m
[32m+[m[32m          ) : ([m
[32m+[m[32m            <p>本棚に本がありません。</p>[m
[32m+[m[32m          )}[m
[32m+[m[32m        </div>[m
[32m+[m[32m      )}[m
[32m+[m[32m      <ReturnTopButton />[m
[32m+[m[32m    </div>[m
[32m+[m[32m  );[m
[32m+[m[32m};[m
[32m+[m
[32m+[m[32mexport default BookshelfPage;[m
\ No newline at end of file[m
[1mdiff --git a/.history/src/app/Bookshelf/page_20240906131004.js b/.history/src/app/Bookshelf/page_20240906131004.js[m
[1mnew file mode 100644[m
[1mindex 0000000..435fd5b[m
[1m--- /dev/null[m
[1m+++ b/.history/src/app/Bookshelf/page_20240906131004.js[m
[36m@@ -0,0 +1,129 @@[m
[32m+[m[32m"use c